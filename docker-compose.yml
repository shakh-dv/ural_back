version: '3.7'

services:
  traefik:
    image: traefik:v2.4
    restart: always
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$1jcz7nkp$.CSffEYT7SPVOr.37ZdAZ/"
      - "traefik.http.middlewares.auth.basicauth.removeheader=true"
    networks:
      - app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/traefik/acme/acme.json:/etc/traefik/acme/acme.json
      - ./configuration/traefik.yml:/traefik.yml:ro
      - ./configuration/config.yml:/config.yml

  back:
    restart: always
    environment:
      - BASE_URL=https://api.ural.ru
      - APP_NAME=ural
      - SERVER_PORT=4000
      - POSTGRES_DATABASE=ural
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=30d
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ural?schema=public
      - CDN_EDGE_PREFIX=https://api.ural.ru/uploads/dispatch/
    build:
      context: ./backend
      target: prod
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ural-backend.rule=Host(`api.ural.ru`)"
      - "traefik.http.routers.ural-backend.tls=true"
      - "traefik.http.routers.ural-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.ural-backend.loadbalancer.server.port=4200"
      - "traefik.docker.network=app"
    volumes:
      - ~/volumes/ural/uploads:/app/uploads
    networks:
      - app
      - internal


  postgres:
    image: "postgres:15.1"
    ports:
      - "127.0.0.1:5432:5432"
    restart: always
    environment:
      - POSTGRES_DB=ural
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
    volumes:
      - ~/volumes/ural/postgres:/var/lib/postgresql/data
    networks:
      - app
      - internal

networks:
  internal:
    name: internal
  app:
    name: app
